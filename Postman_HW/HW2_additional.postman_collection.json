{
	"info": {
		"_postman_id": "198a791e-f94b-40bf-9e7b-cd90498cee43",
		"name": "HW2_additional",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21065991"
	},
	"item": [
		{
			"name": "Task#2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const resp_salary = pm.response.json().salary",
							"",
							"const req_salary = +pm.request.url.query.get('salary')",
							"",
							"",
							"resp_salary.forEach((salary,index)=>{",
							"    pm.test(`${req_salary} * ${index+1} === ${salary}`, () => {",
							"        pm.expect(req_salary*(index+1)).to.eql(+salary)",
							"    })",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Stasie&age=23&salary=12000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Stasie"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "12000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Task#3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3. http://162.55.220.72:5005/object_info_3",
							"//  Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)",
							"",
							"",
							"const req_obj = pm.request.url.query.toObject()",
							"const resp_obj = {",
							"    name: pm.response.json().name,",
							"    age: String(pm.response.json().age),",
							"    salary: String(pm.response.json().salary)",
							"}",
							"",
							"pm.test('Request and response objects are deep equal each other', ()=>{",
							"    pm.expect(req_obj).to.deep.eql(resp_obj)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Stasie&age=23&salary=12000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Stasie"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "12000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Task#4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 4. http://162.55.220.72:5005/user_info_2",
							"// 1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)",
							"",
							"",
							"",
							"const json_keys = [\"start_qa_salary\",\"qa_salary_after_6_months\", \"qa_salary_after_3.5_years\", \"qa_salary_after_12_months\", \"qa_salary_after_1.5_year\", \"person\"]",
							"let resp = pm.response.json()",
							"",
							"json_keys.forEach(key => { ",
							"pm.test(`Check out that body include ${key} property`,()=>{",
							"pm.expect (resp).to.have.property(key)",
							"})",
							"})",
							"",
							"",
							"",
							"// 2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)",
							"",
							"",
							"const salary = pm.environment.get('salary')",
							"const counter = {",
							"    \"start_qa_salary\": 1,",
							"    \"qa_salary_after_6_months\": 2,",
							"    \"qa_salary_after_3.5_years\": 3.8,",
							"    \"qa_salary_after_12_months\": 2.7,",
							"    \"qa_salary_after_1.5_year\": 3.3",
							"    }",
							"",
							"",
							"for(const key in counter){",
							"    pm.test(`${key} from response === salary from request * ${counter[key]}`,() => {",
							"    pm.expect(resp[key]).to.eql(counter[key] * salary)",
							"    })",
							"}",
							"",
							"",
							"// 3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.",
							"",
							"",
							"counter ['person'] = ''",
							"",
							"for(const key in counter){ ",
							"pm.test(`Check out that body include ${key} property`,()=>{",
							"pm.expect (resp).to.have.property(key)",
							"})",
							"",
							"    if (key != 'person'){",
							"    pm.test(`${key} from response === salary from request * ${counter[key]}`,() => {",
							"    pm.expect(resp[key]).to.eql(counter[key] * salary)",
							"    })",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_2?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Task#1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). ",
							"// P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!",
							"// Требования:",
							"// 1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное",
							"// 2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное",
							"// 3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное",
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.",
							"",
							"",
							"",
							"const age = pm.iterationData.get('age')",
							"const salary = pm.iterationData.get('salary')",
							"const name = pm.iterationData.get('name')",
							"",
							"function ageValidation(value){",
							"    return value && !isNaN(value) && value>=18 && value<=120 && Number.isInteger(+value)",
							"}",
							"function salaryValidation(value){",
							"    return value && !isNaN(value) && value>0 && value<1000001 && Number.isInteger(+value)",
							"}",
							"function nameValidation(value){",
							"    return value && value.length>2 && value.length<41 && value.trim() === value",
							"}",
							"",
							"function validate(age,salary,name){",
							"return ageValidation(age),salaryValidation(salary),nameValidation(name)}",
							" if (validate(age,salary,name)) {",
							"    pm.test(`Expect status 200 with age === ${age}, salary ===${salary}, name === ${name}`,()=>{",
							"        pm.response.to.have.status(200)",
							"    });",
							"} else {",
							"    pm.test(`Expect status NOT 200 with age === ${age}, salary ===${salary}, name === ${name}`,()=>{",
							"        pm.response.to.not.have.status(200)",
							"    })",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
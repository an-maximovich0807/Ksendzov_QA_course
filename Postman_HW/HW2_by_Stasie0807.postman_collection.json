{
	"info": {
		"_postman_id": "ad6ef642-e9c7-4f18-8776-b749fbcbd7cf",
		"name": "HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21065991"
	},
	"item": [
		{
			"name": "Task #1 (first)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//3. Проверить, что в body приходит правильный string.",
							"",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Task #2 (user-info_3)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//3. Спарсить response body в json",
							"let jsonData = pm.response.json();",
							"",
							"//7. Спарсить request.",
							"let req = request.data;",
							"",
							"let req_name = req.name;",
							"let resp_name = jsonData.name;",
							"let req_age = req.age;",
							"let resp_age = jsonData.age;",
							"let req_salary = req.salary;",
							"let resp_salary = jsonData.salary;",
							"let resp_family = jsonData.family;",
							"let resp_salary1_5 = jsonData.family.u_salary_1_5_year;",
							"",
							"",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"",
							"pm.test(\"Request name matches responce name\", function () {",
							"    pm.expect(resp_name).to.eql('Elle');",
							"});",
							"",
							"",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"",
							"pm.test(\"Request age matches responce age\", function () {",
							"    pm.expect(resp_age).to.eql('23');",
							"});",
							"",
							"",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"",
							"pm.test(\"Request salary matches responce salary\", function () {",
							"    pm.expect(resp_salary).to.eql(3000);",
							"});",
							"",
							"",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"",
							"pm.test(\"Request name matches responce name (name from request)\", function () {",
							"    pm.expect(resp_name).to.eql(req_name);",
							"});",
							"",
							"",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"",
							"pm.test(\"Request age matches responce age (age from request)\", function () {",
							"    pm.expect(resp_age).to.eql(req_age);",
							"});",
							"",
							"",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"",
							"pm.test(\"Request salary matches responce salary (salary from request)\", function () {",
							"    pm.expect(resp_salary).to.eql(+req_salary);",
							"});",
							"",
							"",
							"//11. Вывести в консоль параметр family из response.",
							"",
							"console.log(' family---', resp_family)",
							"",
							"",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"",
							"pm.test(\"Request 4*salary matches responce 1,5 year's salary (salary from request)\", function () {",
							"    pm.expect(req_salary*4).to.eql(resp_salary1_5);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Elle",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Task #3 (object_info_3)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//3. Спарсить response body в json.",
							"",
							"let jsonData = pm.response.json();",
							"",
							"//4. Спарсить request",
							"let req_data = pm.request.url.query.toObject();",
							"",
							"let resp_name = jsonData.name",
							"let req_name = req_data.name",
							"let req_age = req_data.age",
							"let resp_age = jsonData.age;",
							"let req_salary = req_data.salary",
							"let resp_salary = jsonData.salary",
							"let resp_family = jsonData.family",
							"let resp_dog = resp_family.pets.dog",
							"let resp_dog_name = resp_dog.name",
							"let resp_dog_age = resp_dog.age",
							"",
							"",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"",
							"pm.test(\"Request name matches responce name (name from request)\", function () {",
							"    pm.expect(resp_name).to.eql(req_name);",
							"});",
							"",
							"",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"",
							"pm.test(\"Request age matches responce age (age from request)\", function () {",
							"    pm.expect(resp_age).to.eql(req_age);",
							"});",
							"",
							"",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"",
							"pm.test(\"Request salary matches responce salary (salary from request)\", function () {",
							"    pm.expect(resp_salary).to.eql(+req_salary);",
							"});",
							"",
							"",
							"//8. Вывести в консоль параметр family из response.",
							"",
							"console.log('family from responce ---', resp_family)",
							"",
							"",
							"//9. Проверить, что у параметра dog есть параметры name.",
							"",
							"pm.test(\"Responce parameter dog has parameter name\", function () {",
							"  pm.expect(resp_dog).to.have.property(\"name\");",
							"});",
							"",
							"//10. Проверить, что у параметра dog есть параметры age.",
							"",
							"pm.test(\"Responce parameter dog has parameter age\", function () {",
							"    pm.expect(resp_dog).to.have.property(\"age\");",
							"});",
							"",
							"",
							"//11. Проверить, что параметр name имеет значение Luky.",
							"",
							"pm.test(\"Chek-up dog's name parameter equals 'Luky'\", function () {",
							"    pm.expect(resp_dog_name).to.eql('Luky');",
							"});",
							"",
							"",
							"//12. Проверить, что параметр age имеет значение 4.",
							"",
							"pm.test(\"Chek-up dog's age parameter equals 4\", function () {",
							"    pm.expect(resp_dog_age).to.eql(4);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Stasie&age=23&salary=12000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Stasie"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "12000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Task #4 (object_info_4)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//3. Спарсить response body в json.",
							"",
							"let jsonData = pm.response.json()",
							"",
							"//4. Спарсить request",
							"",
							"let req_data = pm.request.url.query.toObject();",
							"",
							"let req_name = req_data.name",
							"let req_age = req_data.age",
							"",
							"",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"",
							"pm.test(\"Request name matches responce name\", function () {",
							"    pm.expect(jsonData.name).to.eql(req_name);",
							"});",
							"",
							"",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"",
							"pm.test(\"Request age matches responce age\", function () {",
							"    pm.expect(jsonData.age).to.eql(+req_age);",
							"});",
							"",
							"",
							"//7. Вывести в консоль параметр salary из request.",
							"",
							"console.log('Salary from request ---', req_data.salary)",
							"",
							"",
							"//8. Вывести в консоль параметр salary из responce.",
							"",
							"console.log('Salary from responce ---', jsonData.salary)",
							"",
							"",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.",
							"",
							"console.log('Salary from responce 0th element ---', jsonData.salary [0])",
							"",
							"",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"",
							"console.log('Salary from responce 1th element ---', jsonData.salary [1])",
							"",
							"",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"",
							"console.log('Salary from responce 2th element ---', jsonData.salary [2])",
							"",
							"",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"",
							"pm.test(\"Check-up that 0th element from response equils salary from request\", function () {",
							"    pm.expect(jsonData.salary [0]).to.eql(+req_data.salary);",
							"});",
							"",
							"",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"",
							"pm.test(\"Check-up that 1th element from response equils salary from request*2\", function () {",
							"    pm.expect(+jsonData.salary [1]).to.eql((req_data.salary)*2);",
							"});",
							"",
							"",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"",
							"pm.test(\"Check-up that 2th element from response equils salary from request*3\", function () {",
							"    pm.expect(+jsonData.salary [2]).to.eql((req_data.salary)*3);",
							"});",
							"",
							"",
							"/*15. Создать в окружении переменную name",
							"16. Создать в окружении переменную age",
							"17. Создать в окружении переменную salary",
							"18. Передать в окружение переменную name",
							"19. Передать в окружение переменную age",
							"20. Передать в окружение переменную salary*/",
							"",
							"pm.environment.set('name', req_name)",
							"pm.environment.set('age', req_age)",
							"pm.environment.set('salary', req_data.salary)",
							"",
							"",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"",
							"",
							"let arr = jsonData.salary",
							"for(let i=0; i<arr.length; i++){",
							"    console.log(arr[i])",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Stasie&age=23&salary=12000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Stasie"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "12000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Task #5 (user_info_2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//6. Спарсить response body в json.",
							"",
							"let jsonData = pm.response.json()",
							"",
							"//7. Спарсить request.",
							"",
							"let req = pm.request.url.query.toObject();",
							"",
							"",
							"//8. Проверить, что json response имеет параметр start_qa_salary",
							"",
							"pm.test(\"Response includes paremeter 'start_qa_salary'\", function () {",
							"pm.expect(jsonData).to.have.property('start_qa_salary');",
							"});",
							"",
							"",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"",
							"pm.test(\"Response includes paremeter 'qa_salary_after_6_months'\", function () {",
							"pm.expect(jsonData).to.have.property('qa_salary_after_6_months');",
							"});",
							"",
							"",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"",
							"pm.test(\"Response includes paremeter 'qa_salary_after_12_months'\", function () {",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"",
							"",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"",
							"pm.test(\"Response includes paremeter 'qa_salary_after_1.5_year'\", function () {",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"",
							"",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"",
							"pm.test(\"Response includes paremeter 'qa_salary_after_3.5_years'\", function () {",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");",
							"});",
							"",
							"//13. Проверить, что json response имеет параметр person",
							"",
							"pm.test(\"Response includes paremeter 'person'\", function () {",
							"pm.expect(jsonData).to.have.property(\"person\");",
							"});",
							"",
							"",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"",
							"pm.test(\"Check up that start_qa_salary equils salary from request\", function () {",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);",
							"});",
							"",
							"",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"",
							"pm.test(\"Check up that qa_salary_after_6_months equils 2*salary from request\", function () {",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary*2);",
							"});",
							"",
							"",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"",
							"pm.test(\"Check up that qa_salary_after_12_months equils 2.7*salary from request\", function () {",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary*2.7);",
							"});",
							"",
							"",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"",
							"pm.test(\"Check up that qa_salary_after_1.5_year equils 3.3*salary from request\", function () {",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(req.salary*3.3);",
							"});",
							"",
							"",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"",
							"pm.test(\"Check up that qa_salary_after_3.5_years equils 3.8*salary from request\", function () {",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(req.salary*3.8);",
							"});",
							"",
							"",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"",
							"pm.test(\"Check up that 1st u_name element from person equils name from request\", function () {",
							"    pm.expect(jsonData.person.u_name [0]).to.eql(req.name);",
							"});",
							"",
							"",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"",
							"pm.test(\"Check up that u_age from person equils name from request\", function () {",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.age);",
							"});",
							"",
							"",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"",
							"pm.test(\"Check up that u_salary_5_years from person equils 4.2*salary from request\", function () {",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(req.salary*4.2);",
							"});",
							"",
							"",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"",
							"let u_name = jsonData.person.u_name",
							"let i = 0",
							"let l = u_name.length",
							"while (i<l){",
							"    console.log(u_name[i])",
							"    i++",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_2?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}